<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>DevNation Live: Plumbing Kubernetes builds | Deploy with Tekton</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/kUDrXKcy9k8/" /><category term="DevNation" /><category term="Kubernetes" /><category term="Tekton" /><category term="DevNation Live" /><category term="kubernetes" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=620247</id><updated>2019-08-20T07:00:29Z</updated><published>2019-08-20T07:00:29Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you&amp;#8217;ll learn about &lt;a href="https://tekton.dev/"&gt;Tekton&lt;/a&gt;, a &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;-native way of defining and running CI/CD,  from &lt;a href="https://developers.redhat.com/blog/author/kameshsampath/"&gt;Kamesh Sampath&lt;/a&gt;, Principal Software Engineer at Red Hat.&lt;span id="more-620247"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The session explores the characteristics of Tekton, which is cloud-native, decoupled, and declarative. This demo-filled session will show how to combine various building blocks of Tekton to build and deploy (Tasks and Pipelines) a Kubernetes application.&lt;/p&gt; &lt;p&gt;Watch the complete video:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/q5P2V_YShjA" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;Learn more&lt;/h3&gt; &lt;p class="selectionShareable"&gt;Join us at an upcoming &lt;a href="https://developers.redhat.com/events/"&gt;developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Live tech talks&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F20%2Fdevnation-live-plumbing-kubernetes-builds-deploy-with-tekton%2F&amp;#38;linkname=DevNation%20Live%3A%20Plumbing%20Kubernetes%20builds%20%7C%20Deploy%20with%20Tekton" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F20%2Fdevnation-live-plumbing-kubernetes-builds-deploy-with-tekton%2F&amp;#38;linkname=DevNation%20Live%3A%20Plumbing%20Kubernetes%20builds%20%7C%20Deploy%20with%20Tekton" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F20%2Fdevnation-live-plumbing-kubernetes-builds-deploy-with-tekton%2F&amp;#38;linkname=DevNation%20Live%3A%20Plumbing%20Kubernetes%20builds%20%7C%20Deploy%20with%20Tekton" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F20%2Fdevnation-live-plumbing-kubernetes-builds-deploy-with-tekton%2F&amp;#38;linkname=DevNation%20Live%3A%20Plumbing%20Kubernetes%20builds%20%7C%20Deploy%20with%20Tekton" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F20%2Fdevnation-live-plumbing-kubernetes-builds-deploy-with-tekton%2F&amp;#38;linkname=DevNation%20Live%3A%20Plumbing%20Kubernetes%20builds%20%7C%20Deploy%20with%20Tekton" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F20%2Fdevnation-live-plumbing-kubernetes-builds-deploy-with-tekton%2F&amp;#38;linkname=DevNation%20Live%3A%20Plumbing%20Kubernetes%20builds%20%7C%20Deploy%20with%20Tekton" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F20%2Fdevnation-live-plumbing-kubernetes-builds-deploy-with-tekton%2F&amp;#38;linkname=DevNation%20Live%3A%20Plumbing%20Kubernetes%20builds%20%7C%20Deploy%20with%20Tekton" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F20%2Fdevnation-live-plumbing-kubernetes-builds-deploy-with-tekton%2F&amp;#038;title=DevNation%20Live%3A%20Plumbing%20Kubernetes%20builds%20%7C%20Deploy%20with%20Tekton" data-a2a-url="https://developers.redhat.com/blog/2019/08/20/devnation-live-plumbing-kubernetes-builds-deploy-with-tekton/" data-a2a-title="DevNation Live: Plumbing Kubernetes builds | Deploy with Tekton"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/20/devnation-live-plumbing-kubernetes-builds-deploy-with-tekton/"&gt;DevNation Live: Plumbing Kubernetes builds | Deploy with Tekton&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/kUDrXKcy9k8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you&amp;#8217;ll learn about Tekton, a Kubernetes-native way of defining and running CI/CD,  from Kamesh Sampath, Principal Software Engineer at Red Hat. The [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/20/devnation-live-plumbing-kubernetes-builds-deploy-with-tekton/"&gt;DevNation Live: Plumbing Kubernetes builds | Deploy with Tekton&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/20/devnation-live-plumbing-kubernetes-builds-deploy-with-tekton/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">620247</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-08-20T07:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/20/devnation-live-plumbing-kubernetes-builds-deploy-with-tekton/</feedburner:origLink></entry><entry><title>5 Questions Everyone's Asking About Microservices (Question 2)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Qm3xER9JR64/5-questions-everyones-asking-about-microservices-question2.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-5_questions_everyone_s_asking_about_microservices_question_2</id><updated>2019-08-20T05:00:10Z</updated><published>2019-08-20T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://1.bp.blogspot.com/-i6x1EOlxWyE/XVQFqTEqWhI/AAAAAAAAvLk/4p4gtw-bjm4BQAwWePd4zeAQ0Vbg3984ACLcBGAs/s1600/questions.jpg" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="666" data-original-width="1000" height="213" src="https://1.bp.blogspot.com/-i6x1EOlxWyE/XVQFqTEqWhI/AAAAAAAAvLk/4p4gtw-bjm4BQAwWePd4zeAQ0Vbg3984ACLcBGAs/s320/questions.jpg" width="320" /&gt;&lt;/a&gt;When discussing the development impact on existing applications while transitioning to microservices, there are five questions that keep popping up in one form or another. They are the same regardless of the size of the organization and seem to become part of strategy discussions later in the process as organizations move towards microservice architectures. &lt;br /&gt;&lt;br /&gt;These articles cover questions that everyone should ask about microservices. Their based on experiences from interactions with organizations in the process of conquering microservices for existing development and for delivering modern applications.&lt;br /&gt;&amp;nbsp;Previously I covered the first question around &lt;a href="http://www.schabell.org/2019/08/5-questions-everyones-asking-about-microservices-question1.html" target="_blank"&gt;the performance impact of microservices&lt;/a&gt;. In this second article I'll take a look at dealing with state after splitting up monolithic applications.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;State and monoliths&lt;/h3&gt;&lt;div style="text-align: left;"&gt;After the initial discussion around the first question, it’s usually followed by issues of how to deal with state in a monolithic application.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;“How to deal with services that get split off from their monolith usage and are stateful, where we want to use the benefits of a container platform like OpenShift?”&lt;/i&gt;&lt;br /&gt;There are two types of &lt;i&gt;stateful&lt;/i&gt; in relation to applications:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Building a business application that uses either in-memory state or database state.&lt;/li&gt;&lt;li&gt;Building a specific database engine and need highly performant, even low-level, access to the underlying disk. &lt;/li&gt;&lt;/ol&gt;The first option is the mainstream way of developing and deploying cloud-native applications with their &lt;i&gt;stateful&lt;/i&gt; components, while still splitting out microservices, using a container platform like OpenShift based on Kubernetes. &lt;br /&gt;&lt;br /&gt;Option two is another story and is often best left to specialized vendors. This is because these types of solutions can go deep enough to involve maintaining extensions to operating system kernels themselves. It makes more sense to focus on your domain specific business value and delivering that to your customers. &lt;br /&gt;&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: left;"&gt;Next time in this series of articles, a look at dealing with data across a distributed microservices architecture.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;span style="font-size: small;"&gt;&lt;i&gt;(article co-authored with &lt;a href="https://twitter.com/burrsutter" target="_blank"&gt;Burr Sutter) &lt;/a&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1cs_A0DC-fA:ULivhgFycAU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1cs_A0DC-fA:ULivhgFycAU:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1cs_A0DC-fA:ULivhgFycAU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=1cs_A0DC-fA:ULivhgFycAU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1cs_A0DC-fA:ULivhgFycAU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=1cs_A0DC-fA:ULivhgFycAU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1cs_A0DC-fA:ULivhgFycAU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=1cs_A0DC-fA:ULivhgFycAU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1cs_A0DC-fA:ULivhgFycAU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=1cs_A0DC-fA:ULivhgFycAU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=1cs_A0DC-fA:ULivhgFycAU:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/1cs_A0DC-fA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Qm3xER9JR64" height="1" width="1" alt=""/&gt;</content><summary>When discussing the development impact on existing applications while transitioning to microservices, there are five questions that keep popping up in one form or another. They are the same regardless of the size of the organization and seem to become part of strategy discussions later in the process as organizations move towards microservice architectures. These articles cover questions that ever...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-08-20T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/1cs_A0DC-fA/5-questions-everyones-asking-about-microservices-question2.html</feedburner:origLink></entry><entry><title>Get started with Eclipse Che 7 and Quarkus: An overview</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lspvcX2wqII/" /><category term="Eclipse Che" /><category term="Java" /><category term="Quarkus" /><category term="Eclipse Che 7" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=619147</id><updated>2019-08-19T07:00:22Z</updated><published>2019-08-19T07:00:22Z</published><content type="html">&lt;p&gt;In this short video tutorial, hosted by Doug Tidwell, we&amp;#8217;ll take a look at the new &lt;a href="https://developers.redhat.com/blog/2019/03/11/eclipse-che-overview/"&gt;Eclipse Che 7&lt;/a&gt; interface along with &lt;a href="https://developers.redhat.com/blog/2019/05/09/create-your-first-quarkus-project-with-eclipse-ide-red-hat-codeready-studio/"&gt;Quarkus&lt;/a&gt;, the revolutionary new technology that can make Java applications very small and very fast.&lt;span id="more-619147"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In the course of this demo, we&amp;#8217;ll show how to set up a running workspace and run a simple app. To get started, we&amp;#8217;ll also be using &lt;a href="http://github.com/kubernetes/minikube/releases/"&gt;Minikube version 1.2.0 &lt;/a&gt;and &lt;a href="https://github.com/helm/helm/releases/"&gt;Helm version 2.14.1&lt;/a&gt;, both of which you&amp;#8217;ll need to have installed. For Che 7, we&amp;#8217;re using the &lt;a href="http://eclipse.org/che/docs/che-7/che-quick-starts.html#deploying-che-using-chectl"&gt;chectl tool&lt;/a&gt;; note that we&amp;#8217;re using the July 30 build of chectl version 0.0.2. Finally, we assume you have wget installed as part of your operating system.&lt;/p&gt; &lt;p&gt;Follow along with the demo and see the power of Quarkus in action.&lt;/p&gt; &lt;p&gt;Watch the complete video below:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/3yaLcbFQhcY" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F19%2Fget-started-with-eclipse-che-7-and-quarkus-an-overview%2F&amp;#38;linkname=Get%20started%20with%20Eclipse%20Che%207%20and%20Quarkus%3A%20An%20overview" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F19%2Fget-started-with-eclipse-che-7-and-quarkus-an-overview%2F&amp;#38;linkname=Get%20started%20with%20Eclipse%20Che%207%20and%20Quarkus%3A%20An%20overview" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F19%2Fget-started-with-eclipse-che-7-and-quarkus-an-overview%2F&amp;#38;linkname=Get%20started%20with%20Eclipse%20Che%207%20and%20Quarkus%3A%20An%20overview" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F19%2Fget-started-with-eclipse-che-7-and-quarkus-an-overview%2F&amp;#38;linkname=Get%20started%20with%20Eclipse%20Che%207%20and%20Quarkus%3A%20An%20overview" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F19%2Fget-started-with-eclipse-che-7-and-quarkus-an-overview%2F&amp;#38;linkname=Get%20started%20with%20Eclipse%20Che%207%20and%20Quarkus%3A%20An%20overview" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F19%2Fget-started-with-eclipse-che-7-and-quarkus-an-overview%2F&amp;#38;linkname=Get%20started%20with%20Eclipse%20Che%207%20and%20Quarkus%3A%20An%20overview" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F19%2Fget-started-with-eclipse-che-7-and-quarkus-an-overview%2F&amp;#38;linkname=Get%20started%20with%20Eclipse%20Che%207%20and%20Quarkus%3A%20An%20overview" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F19%2Fget-started-with-eclipse-che-7-and-quarkus-an-overview%2F&amp;#038;title=Get%20started%20with%20Eclipse%20Che%207%20and%20Quarkus%3A%20An%20overview" data-a2a-url="https://developers.redhat.com/blog/2019/08/19/get-started-with-eclipse-che-7-and-quarkus-an-overview/" data-a2a-title="Get started with Eclipse Che 7 and Quarkus: An overview"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/19/get-started-with-eclipse-che-7-and-quarkus-an-overview/"&gt;Get started with Eclipse Che 7 and Quarkus: An overview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lspvcX2wqII" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this short video tutorial, hosted by Doug Tidwell, we&amp;#8217;ll take a look at the new Eclipse Che 7 interface along with Quarkus, the revolutionary new technology that can make Java applications very small and very fast. In the course of this demo, we&amp;#8217;ll show how to set up a running workspace and run a [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/19/get-started-with-eclipse-che-7-and-quarkus-an-overview/"&gt;Get started with Eclipse Che 7 and Quarkus: An overview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/19/get-started-with-eclipse-che-7-and-quarkus-an-overview/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">619147</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-08-19T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/19/get-started-with-eclipse-che-7-and-quarkus-an-overview/</feedburner:origLink></entry><entry><title>DevConf.US 2019 - 7 Steps to Expanding Your AppDev Toolbox (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/U79bps4jr8Y/devconfus-2019-7-steps-to-expanding-appdev-toolbox-slides.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-devconf_us_2019_7_steps_to_expanding_your_appdev_toolbox_slides</id><updated>2019-08-17T18:30:06Z</updated><published>2019-08-17T18:30:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;"&gt;&lt;a href="https://devconf.info/us/" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="542" data-original-width="1186" height="146" src="https://2.bp.blogspot.com/-T6LZWIuPP5o/XHexg0Gq2XI/AAAAAAAAteo/pbLc5j5pqoQiZvEAZ_YdvW9M9DN3oMqeACLcBGAs/s320/Screenshot%2B2019-02-28%2Bat%2B11.01.22.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;a href="https://www.schabell.org/2019/04/devconfus-2019-open-source-career-with-automation-integration.html" target="_blank"&gt;Previously&lt;/a&gt; I talked about&amp;nbsp;&lt;a href="http://www.schabell.org/2018/04/devconus-2018-process-driven-developement-cloud-containers.html" target="_blank"&gt;submitting to DevConf.us in Boston&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;This week I was in Boston presenting &lt;a href="http://www.schabell.org/2019/06/devconfus-2019-open-source-career-with-automation-integration-acceptances.html" target="_blank"&gt;three talks that got accepted&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;It was a lot of fun and happy to see so many faces of friend, to meet so many eager new developers, and to share the stories I have to tell.&lt;br /&gt;&lt;br /&gt;Below are the slides from the talk I gave on 7 steps to expanding your application development toolbox.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;First the slides and then the abstract:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/yjZlsMQgVs3HfL" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://devconfus2019.sched.com/event/RFCn/7-steps-to-expanding-your-appdev-toolbox" target="_blank"&gt;7 Steps to Expanding Your AppDev Toolbox&lt;/a&gt;&lt;/h3&gt;&lt;i&gt;Are you ready to add automation to your development toolbox? Are you looking to integrate processes in your application development projects but not sure&amp;nbsp; where to start? Do the process integration tools intimidate you a little? No worries, we've got the easiest way to spin up your knowledge around process integration using open source technologies. Take a tour with us and learn how in 7 easy steps you can soar to new heights by adding these new skills to your AppDev toolbox. You'll walk away from this session with the learning path to integrating automation in to your next project. This session content provides all materials free, online, and available in easy to follow hands-on format. Attendees can head homeward after this session and continue advancing their skills at their own pace.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Thanks for attending and feel free to reach out via this sites contact form if you have any questions or comments. &lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=QTQiPesBWiQ:s2963gH59mQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=QTQiPesBWiQ:s2963gH59mQ:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=QTQiPesBWiQ:s2963gH59mQ:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=QTQiPesBWiQ:s2963gH59mQ:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=QTQiPesBWiQ:s2963gH59mQ:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=QTQiPesBWiQ:s2963gH59mQ:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=QTQiPesBWiQ:s2963gH59mQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=QTQiPesBWiQ:s2963gH59mQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=QTQiPesBWiQ:s2963gH59mQ:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=QTQiPesBWiQ:s2963gH59mQ:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=QTQiPesBWiQ:s2963gH59mQ:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/QTQiPesBWiQ" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/U79bps4jr8Y" height="1" width="1" alt=""/&gt;</content><summary>Previously I talked about submitting to DevConf.us in Boston. This week I was in Boston presenting three talks that got accepted. It was a lot of fun and happy to see so many faces of friend, to meet so many eager new developers, and to share the stories I have to tell. Below are the slides from the talk I gave on 7 steps to expanding your application development toolbox. First the slides and then...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-08-17T18:30:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/QTQiPesBWiQ/devconfus-2019-7-steps-to-expanding-appdev-toolbox-slides.html</feedburner:origLink></entry><entry><title>DevConf.US 2019 - How to Jump Start Your Career in Open Source (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/z6TgiVsQRBE/devconfus-2019-how-to-jump-start-your-career-in-open-source-slides.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-devconf_us_2019_how_to_jump_start_your_career_in_open_source_slides</id><updated>2019-08-17T17:40:02Z</updated><published>2019-08-17T17:40:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://devconf.info/us/" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="542" data-original-width="1186" height="146" src="https://2.bp.blogspot.com/-T6LZWIuPP5o/XHexg0Gq2XI/AAAAAAAAteo/pbLc5j5pqoQiZvEAZ_YdvW9M9DN3oMqeACLcBGAs/s320/Screenshot%2B2019-02-28%2Bat%2B11.01.22.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;a href="https://www.schabell.org/2019/04/devconfus-2019-open-source-career-with-automation-integration.html" target="_blank"&gt;Previously&lt;/a&gt; I talked about&amp;nbsp;&lt;a href="http://www.schabell.org/2018/04/devconus-2018-process-driven-developement-cloud-containers.html" target="_blank"&gt;submitting to DevConf.us in Boston&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;This week I was in Boston presenting &lt;a href="http://www.schabell.org/2019/06/devconfus-2019-open-source-career-with-automation-integration-acceptances.html" target="_blank"&gt;three talks that got accepted&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;It was a lot of fun and happy to see so many faces of friend, to meet so many eager new developers, and to share the stories I have to tell.&lt;br /&gt;&lt;br /&gt;Below are the slides from the talk I gave on how to jump start your career in open source.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;First the slides and then the abstract:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/ipVFFZ2sYfbse" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://devconfus2019.sched.com/event/RFDr/how-to-jump-start-your-career-in-open-source" target="_blank"&gt;How to Jump Start Your Career in Open Source&lt;/a&gt;&lt;/h3&gt;&lt;i&gt;It's not coincidence. It's not luck. It's not going to happen by itself, so what's the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source. Join me for an hour of power where you'll be given a clear and easy to use plan for jump starting your open source career immediately. &lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Thanks for attending and feel free to reach out via this sites contact form if you have any questions or comments.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4D8dlY0mNTo:pkgcu6asmJk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4D8dlY0mNTo:pkgcu6asmJk:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4D8dlY0mNTo:pkgcu6asmJk:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4D8dlY0mNTo:pkgcu6asmJk:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4D8dlY0mNTo:pkgcu6asmJk:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4D8dlY0mNTo:pkgcu6asmJk:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4D8dlY0mNTo:pkgcu6asmJk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4D8dlY0mNTo:pkgcu6asmJk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4D8dlY0mNTo:pkgcu6asmJk:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4D8dlY0mNTo:pkgcu6asmJk:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4D8dlY0mNTo:pkgcu6asmJk:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/4D8dlY0mNTo" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/z6TgiVsQRBE" height="1" width="1" alt=""/&gt;</content><summary>Previously I talked about submitting to DevConf.us in Boston. This week I was in Boston presenting three talks that got accepted. It was a lot of fun and happy to see so many faces of friend, to meet so many eager new developers, and to share the stories I have to tell. Below are the slides from the talk I gave on how to jump start your career in open source. First the slides and then the abstract...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-08-17T17:40:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/4D8dlY0mNTo/devconfus-2019-how-to-jump-start-your-career-in-open-source-slides.html</feedburner:origLink></entry><entry><title>DevConf.US 2019 - 3 Pitfalls Everyone Ignores with Microservices (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AsLb75aZU5E/devconfus-2019-3-pitfalls-everyone-ignores-with-microservices-slides.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-devconf_us_2019_3_pitfalls_everyone_ignores_with_microservices_slides</id><updated>2019-08-17T14:40:10Z</updated><published>2019-08-17T14:40:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://devconf.info/us/" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="542" data-original-width="1186" height="146" src="https://2.bp.blogspot.com/-T6LZWIuPP5o/XHexg0Gq2XI/AAAAAAAAteo/pbLc5j5pqoQiZvEAZ_YdvW9M9DN3oMqeACLcBGAs/s320/Screenshot%2B2019-02-28%2Bat%2B11.01.22.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;a href="https://www.schabell.org/2019/04/devconfus-2019-open-source-career-with-automation-integration.html" target="_blank"&gt;Previously&lt;/a&gt; I talked about&amp;nbsp;&lt;a href="http://www.schabell.org/2018/04/devconus-2018-process-driven-developement-cloud-containers.html" target="_blank"&gt;submitting to DevConf.us in Boston&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;This week I was in Boston presenting &lt;a href="http://www.schabell.org/2019/06/devconfus-2019-open-source-career-with-automation-integration-acceptances.html" target="_blank"&gt;three talks that got accepted&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;It was a lot of fun and happy to see so many faces of friend, to meet so many eager new developers, and to share the stories I have to tell.&lt;br /&gt;&lt;br /&gt;Below are the slides from the talk I gave on 3 pitfalls everyone ignores with microservices.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;First the slides and then the abstract:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/D9KrhxvKR32WQm" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://devconfus2019.sched.com/event/RFCq/3-pitfalls-everyone-ignores-with-microservices" target="_blank"&gt;3 Pitfalls Everyone Ignores with Microservices&lt;/a&gt;&lt;/h3&gt;&lt;i&gt;The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. The choices you’ve got to make don’t preclude the daily work of developing amazing applications. From containers, cloud, multicloud, and beyond, microservices are the core infrastructure ensuring your organization's flexibility in the digital world. Join us for an hour of power, where real life developer experiences are used to highlight the three top lessons we're all learning as we transition our integration infrastructure into modern day microservices.&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Thanks for attending and feel free to reach out via this sites contact form if you have any questions or comments.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-b-UVfBS8FI:bbemcM0xpJY:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-b-UVfBS8FI:bbemcM0xpJY:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-b-UVfBS8FI:bbemcM0xpJY:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-b-UVfBS8FI:bbemcM0xpJY:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-b-UVfBS8FI:bbemcM0xpJY:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-b-UVfBS8FI:bbemcM0xpJY:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-b-UVfBS8FI:bbemcM0xpJY:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-b-UVfBS8FI:bbemcM0xpJY:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-b-UVfBS8FI:bbemcM0xpJY:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-b-UVfBS8FI:bbemcM0xpJY:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-b-UVfBS8FI:bbemcM0xpJY:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/-b-UVfBS8FI" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AsLb75aZU5E" height="1" width="1" alt=""/&gt;</content><summary>Previously I talked about submitting to DevConf.us in Boston. This week I was in Boston presenting three talks that got accepted. It was a lot of fun and happy to see so many faces of friend, to meet so many eager new developers, and to share the stories I have to tell. Below are the slides from the talk I gave on 3 pitfalls everyone ignores with microservices. First the slides and then the abstra...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-08-17T14:40:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/-b-UVfBS8FI/devconfus-2019-3-pitfalls-everyone-ignores-with-microservices-slides.html</feedburner:origLink></entry><entry><title>JBoss Editorial (August 16th)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QkCs4ZNzq58/jboss-editorial-august-16th" /><category term="devnation" scheme="searchisko:content:tags" /><category term="Drools" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="Hibernate" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Paul Robinson</name></author><id>searchisko:content:id:jbossorg_blog-jboss_editorial_august_16th</id><updated>2019-08-16T16:29:38Z</updated><published>2019-08-16T16:29:38Z</published><content type="html">&lt;!-- [DocumentBodyStart:ed1579c0-19d0-417c-88cb-680f958ac1ff] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Read on to find out the latest from the JBoss community...&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/08/09/devnation-live-quarkus-hibernate-with-panache/" rel="nofollow"&gt;DevNation Live: Quarkus &amp;#8211; Hibernate with Panache&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In this tech talk you will learn from Emmanuel Bernard about Hibernate Panache. Hibernate ORM with Panache focuses on the typical use cases, making your entities trivial and fun to write in Quarkus.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/08/07/devnation-live-revisiting-effective-java-in-2019/" rel="nofollow"&gt;DevNation Live: Revisiting Effective Java in 2019&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Joshua Bloch has given us the third edition of Effective Java, but almost 10 years have passed since the last edition. And, now we have a whole generation of Java developers who could benefit from this knowledge. In this tech talk, we hear from Edson Yanaga who explains what&amp;#8217;s new in the updated Effective Java and adds some more tips not included in the book.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;&lt;a class="jive-link-external-small" href="https://planet.jboss.org/post/5_questions_everyone_s_asking_about_microservices_question_1" rel="nofollow"&gt;5 Questions Everyone's Asking About Microservices (Question 1)&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Eric Schabell has observed that there are 5 common questions he's asked when meeting with existing and potential customers. In this series he tackles each one in turn. In part one he'll be answering:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;blockquote class="jive-quote"&gt;&lt;p&gt;&amp;ldquo;How to approach the performance impact in communications when a monolith gets split up into distributed services (microservices), such as from internal calls to distributed REST APIs?&amp;#8221;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Stay tuned for part 2 where he'll be discussing how to deal with state after splitting up monolithic applications.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;&lt;a class="jive-link-external-small" href="https://planet.jboss.org/post/recent_drools_dmn_open_source_engine_performance_improvements" rel="nofollow"&gt;Recent Drools DMN open source engine performance improvements&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Drools community are always looking for ways to improve the performance of the Drools DMN open source engine. They have recently reviewed a DMN use-case where the actual input population of Input Data nodes varied to some degree; this highlighted a suboptimal behavior of the engine, which we improved in recent releases. In this post Matteo Mortari shares their findings.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;&lt;a class="jive-link-external-small" href="https://planet.jboss.org/post/beginners_guide_building_an_online_retail_web_shop_workshop_technical_rules" rel="nofollow"&gt;Beginners Guide - Building an Online Retail Web Shop Workshop (Technical Rules)&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;With the release of Red Hat Decision Manager 7.3 Eric Schabell has started updating his free online workshop, a beginners guide to building an online retail web shop. In this post Eric explains how to create Technical Rules with Red Hat Decision Manager.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:ed1579c0-19d0-417c-88cb-680f958ac1ff] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QkCs4ZNzq58" height="1" width="1" alt=""/&gt;</content><summary>Read on to find out the latest from the JBoss community...   DevNation Live: Quarkus – Hibernate with Panache In this tech talk you will learn from Emmanuel Bernard about Hibernate Panache. Hibernate ORM with Panache focuses on the typical use cases, making your entities trivial and fun to write in Quarkus.   DevNation Live: Revisiting Effective Java in 2019 Joshua Bloch has given us the third edi...</summary><dc:creator>Paul Robinson</dc:creator><dc:date>2019-08-16T16:29:38Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/08/16/jboss-editorial-august-16th</feedburner:origLink></entry><entry><title>Manipulating emojis in Java, or: What is &#x1f43b; + 1?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eWvUI3Wikps/" /><category term="Java" /><author><name>Doug Tidwell</name></author><id>https://developers.redhat.com/blog/?p=618297</id><updated>2019-08-16T07:00:58Z</updated><published>2019-08-16T07:00:58Z</published><content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning: The code you&amp;#8217;re about to see has no redeeming qualities whatsoever. We hope you enjoy it as much as we do. &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;If you&amp;#8217;re like us, you&amp;#8217;ve probably been wondering about how to manipulate emojis in your Java programs. Or perhaps you&amp;#8217;ve been thinking about that age-old question, &amp;#8220;What is &lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/1f43b.png" alt="&#x1f43b;" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt; + 1?&amp;#8221; Thanks to a recent coding session in which yr author spent what could have been several productive hours going down a &lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/1f430.png" alt="&#x1f430;" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt;&lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/1f573.png" alt="&#x1f573;" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt;(rabbit hole), we can help you answer that question.&lt;/p&gt; &lt;p&gt;&lt;span id="more-618297"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;First of all, here&amp;#8217;s the code in its entirety, &lt;code&gt;MysteryAnimal.java&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;public class MysteryAnimal { public static void main(String[] args) { String bear = "&amp;#x1f43b;"; // If the previous line doesn't show up in your editor, // you can comment it out and use this declaration instead: // String bear = "\ud83d\udc3b"; int bearCodepoint = bear.codePointAt(bear.offsetByCodePoints(0, 0)); int mysteryAnimalCodepoint = bearCodepoint + 1; char mysteryAnimal[] = {Character.highSurrogate(mysteryAnimalCodepoint), Character.lowSurrogate(mysteryAnimalCodepoint)}; System.out.println("The Coderland Zoo's latest attraction: " + String.valueOf(mysteryAnimal)); } }&lt;/pre&gt; &lt;p&gt;The code creates a Java &lt;code&gt;String&lt;/code&gt; whose value is the bear emoji. Note that you can represent the bear emoji with the string &lt;code&gt;"\ud83d\udc3b"&lt;/code&gt; — two Unicode values that work as a pair. With the string defined (bear = &lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/1f43b.png" alt="&#x1f43b;" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt;), we get the Unicode code point for the emoji, add 1 to it, convert the updated code point back to a new pair of values, and finally print the result.&lt;/p&gt; &lt;p&gt;The problem for Java is that a &lt;code&gt;char&lt;/code&gt; can only represent a 4-digit hex number (16 bits), while emojis are 5-digit hex numbers. If you&amp;#8217;ve got some time to kill (and frankly, if you&amp;#8217;re reading this article, you probably do), the Unicode site has &lt;a href="https://unicode.org/emoji/charts/full-emoji-list.html"&gt;the complete list of emojis&lt;/a&gt;. &lt;em&gt;&lt;strong&gt;Spoiler alert: looking at that list might give away the answer to this puzzle.&lt;/strong&gt;&lt;/em&gt; The Unicode code point for the bear emoji is &lt;code&gt;\u1f43b&lt;/code&gt;. Again, that&amp;#8217;s too large a number to be represented as a &lt;code&gt;char&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The solution from the Unicode consortium was to create what are called &lt;em&gt;surrogate characters&lt;/em&gt;. (This is despite the fact that emojis are vital to modern human existence.) An emoji is represented as an ordered pair of 4-digit hex numbers: a high surrogate and a low surrogate. There are fairly complicated mathematical formulas to calculate the two based on the original 5-digit hex number, but the Java &lt;code&gt;Character&lt;/code&gt; class, as you can see above, can calculate those two values for you. To represent an emoji in a Java &lt;code&gt;String&lt;/code&gt;, we create a &lt;code&gt;char&lt;/code&gt; array with the two surrogates and use the &lt;code&gt;String.valueOf()&lt;/code&gt; method to combine them.&lt;/p&gt; &lt;p&gt;You can find more information about surrogate characters in &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html"&gt;the documentation for the Java &lt;code&gt;Character&lt;/code&gt; class&lt;/a&gt;. You can find even more information about surrogates in &lt;a href="http://www.unicode.org/versions/Unicode12.1.0/ch03.pdf#G2630"&gt;the Unicode standard itself&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;And now, the answer&lt;/h2&gt; &lt;p&gt;If you run the code above, you&amp;#8217;ll get these results:&lt;/p&gt; &lt;pre&gt;The Coderland Zoo's latest attraction: &amp;#x1f43c;&lt;/pre&gt; &lt;p&gt;And there you have it! From an emoji perspective, Bear + 1 = Panda. We hope you&amp;#8217;ve enjoyed this diversion; if you&amp;#8217;ve read this far, we assume you probably did. Enjoy manipulating emojis in Java, and let us know in the comments if you find any practical use for this technology. Have fun!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F16%2Fmanipulating-emojis-in-java-or-what-is-%25f0%259f%2590%25bb-1%2F&amp;#38;linkname=Manipulating%20emojis%20in%20Java%2C%20or%3A%20What%20is%20%F0%9F%90%BB%20%2B%201%3F" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F16%2Fmanipulating-emojis-in-java-or-what-is-%25f0%259f%2590%25bb-1%2F&amp;#38;linkname=Manipulating%20emojis%20in%20Java%2C%20or%3A%20What%20is%20%F0%9F%90%BB%20%2B%201%3F" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F16%2Fmanipulating-emojis-in-java-or-what-is-%25f0%259f%2590%25bb-1%2F&amp;#38;linkname=Manipulating%20emojis%20in%20Java%2C%20or%3A%20What%20is%20%F0%9F%90%BB%20%2B%201%3F" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F16%2Fmanipulating-emojis-in-java-or-what-is-%25f0%259f%2590%25bb-1%2F&amp;#38;linkname=Manipulating%20emojis%20in%20Java%2C%20or%3A%20What%20is%20%F0%9F%90%BB%20%2B%201%3F" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F16%2Fmanipulating-emojis-in-java-or-what-is-%25f0%259f%2590%25bb-1%2F&amp;#38;linkname=Manipulating%20emojis%20in%20Java%2C%20or%3A%20What%20is%20%F0%9F%90%BB%20%2B%201%3F" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F16%2Fmanipulating-emojis-in-java-or-what-is-%25f0%259f%2590%25bb-1%2F&amp;#38;linkname=Manipulating%20emojis%20in%20Java%2C%20or%3A%20What%20is%20%F0%9F%90%BB%20%2B%201%3F" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F16%2Fmanipulating-emojis-in-java-or-what-is-%25f0%259f%2590%25bb-1%2F&amp;#38;linkname=Manipulating%20emojis%20in%20Java%2C%20or%3A%20What%20is%20%F0%9F%90%BB%20%2B%201%3F" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F16%2Fmanipulating-emojis-in-java-or-what-is-%25f0%259f%2590%25bb-1%2F&amp;#038;title=Manipulating%20emojis%20in%20Java%2C%20or%3A%20What%20is%20%F0%9F%90%BB%20%2B%201%3F" data-a2a-url="https://developers.redhat.com/blog/2019/08/16/manipulating-emojis-in-java-or-what-is-%f0%9f%90%bb-1/" data-a2a-title="Manipulating emojis in Java, or: What is &amp;#x1f43b; + 1?"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/16/manipulating-emojis-in-java-or-what-is-%f0%9f%90%bb-1/"&gt;Manipulating emojis in Java, or: What is &#x1f43b; + 1?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eWvUI3Wikps" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Warning: The code you&amp;#8217;re about to see has no redeeming qualities whatsoever. We hope you enjoy it as much as we do.  If you&amp;#8217;re like us, you&amp;#8217;ve probably been wondering about how to manipulate emojis in your Java programs. Or perhaps you&amp;#8217;ve been thinking about that age-old question, &amp;#8220;What is &#x1f43b; + 1?&amp;#8221; Thanks to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/16/manipulating-emojis-in-java-or-what-is-%f0%9f%90%bb-1/"&gt;Manipulating emojis in Java, or: What is &#x1f43b; + 1?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/16/manipulating-emojis-in-java-or-what-is-%f0%9f%90%bb-1/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">618297</post-id><dc:creator>Doug Tidwell</dc:creator><dc:date>2019-08-16T07:00:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/16/manipulating-emojis-in-java-or-what-is-%f0%9f%90%bb-1/</feedburner:origLink></entry><entry><title>How to use Dekorate to create Kubernetes manifests</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/12eGCjkcYzk/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Dekorate" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>ikanello</name></author><id>searchisko:content:id:jbossorg_blog-how_to_use_dekorate_to_create_kubernetes_manifests</id><updated>2019-08-15T07:00:28Z</updated><published>2019-08-15T07:00:28Z</published><content type="html">&lt;p&gt;&amp;#8220;Write once, run everywhere&amp;#8221; is a slogan created by Sun Microsystems to illustrate the cross-platform benefits of &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt;. In the cloud-native world, this slogan is more accurate than ever, with virtualization and containers increasing the distance between code and hardware even further. But what does this shift means for developers?&lt;/p&gt; &lt;p&gt;Developers need to take care of containerizing their application and also provide a set of manifests for &lt;a href="https://kubernetes.io"&gt;Kubernetes&lt;/a&gt; (which now tends to be a synonym of cloud). In this article, we are going to focus on the latter and, more specifically, on how to use &lt;a href="https://github.com/dekorateio/dekorate"&gt;Dekorate&lt;/a&gt; to create and maintain these manifests with the minimum possible effort.&lt;span id="more-618127"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Dekorate&lt;/h3&gt; &lt;p&gt;&lt;a href="https://github.com/dekorateio/dekorate"&gt;Dekorate&lt;/a&gt; is a set of manifest generators, decorators, and tools that make the creation of Kubernetes manifests as easy as adding a jar into your class path. It&amp;#8217;s based on Java annotation processors, which means it works with any JVM language that supports annotations, regardless of the build tool you are using (works with Maven, Gradle, Basel, etc).&lt;/p&gt; &lt;p&gt;Dekorate supports vanilla &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat Openshift&lt;/a&gt; and also popular extensions (e.g., &lt;a href="https://svc-cat.io"&gt;Service Catalog&lt;/a&gt;) and operators (e.g., &lt;a href="https://prometheus.io"&gt;Prometheus&lt;/a&gt; and &lt;a href="https://www.jaegertracing.io"&gt;Jaeger&lt;/a&gt;). What&amp;#8217;s even more exciting is that it provides class support for &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt;, which means it can understand things like beans, extensions, and Spring Boot configuration present in your code and aligns the generated manifests accordingly. For example, it can detect the presence of &lt;a href="https://github.com/spring-cloud/spring-cloud-kubernetes"&gt;Spring Cloud Kubernetes&lt;/a&gt; and configure the required role bindings and service accounts that are required.&lt;/p&gt; &lt;h4 id="org4e85658"&gt;Getting started&lt;/h4&gt; &lt;p&gt;The easiest way to get started is to add the jar that corresponds to your target platform in the class path. Kubernetes users would need:&lt;/p&gt; &lt;pre class="src src-xml"&gt;&amp;#60;&lt;span style="color: #c678dd;"&gt;dependency&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62;io.dekorate&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62;kuberentes-annotations&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;version&lt;/span&gt;&amp;#62;0.7.5&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;/&lt;span style="color: #c678dd;"&gt;depndency&lt;/span&gt;&amp;#62; &lt;/pre&gt; &lt;p&gt;Spring Boot users might prefer a &amp;#8220;starter&amp;#8221; module that encloses all modules related to Spring Boot integration.&lt;/p&gt; &lt;pre class="src src-xml"&gt;&amp;#60;&lt;span style="color: #c678dd;"&gt;dependency&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62;io.dekorate&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62;kubernetes-spring-starter&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;version&lt;/span&gt;&amp;#62;0.7.5&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;/&lt;span style="color: #c678dd;"&gt;depndency&lt;/span&gt;&amp;#62; &lt;/pre&gt; &lt;p&gt;Openshift users would want to use:&lt;/p&gt; &lt;pre class="src src-xml"&gt;&amp;#60;&lt;span style="color: #c678dd;"&gt;dependency&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62;io.dekorate&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62;openshift-spring-starter&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;&lt;span style="color: #c678dd;"&gt;version&lt;/span&gt;&amp;#62;0.7.5&amp;#60;/&lt;span style="color: #c678dd;"&gt;groupId&lt;/span&gt;&amp;#62; &amp;#60;/&lt;span style="color: #c678dd;"&gt;depndency&lt;/span&gt;&amp;#62; &lt;/pre&gt; &lt;p&gt;During compilation, &lt;a href="https://github.com/dekorateio/dekorate"&gt;Dekorate&lt;/a&gt; will be triggered by the compiler and will generate Kubernetes or Openshift (or even both based on which modules are added to classpath) manifests under &lt;code&gt;target/classes/META-INF/dekorate&lt;/code&gt;. These manifests can then be directly applied to the cluster in order to deploy the application.&lt;/p&gt; &lt;pre class="src src-sh"&gt;kubectl apply -f target/classes/dekorate/kubernetes.yml &lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre class="src src-sh"&gt;oc apply -f target/classes/dekorate/openshift.yml &lt;/pre&gt; &lt;h4&gt;Dekorating the generated manifests&lt;/h4&gt; &lt;p&gt;The generated manifests will contain a basic &lt;em&gt;Deployment&lt;/em&gt; resource (or &lt;em&gt;DeploymentConfig&lt;/em&gt; in the case of Openshift). The manifest may also contain additional configuration or resources based on what Dekorate could make out of your code. For example, if Dekorate detects an HTTP endpoint, the HTTP port will be added to the container and exposed as a &lt;em&gt;Service&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Further customization/decoration of these manifests can be performed using:&lt;/p&gt; &lt;ul class="org-ul"&gt; &lt;li&gt;Annotations&lt;/li&gt; &lt;li&gt;Application configuration&lt;/li&gt; &lt;li&gt;Both of the above&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;strong&gt;Using annotations&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;The provided annotations allow the user to specify pretty much anything related to the deployment manifest of the application, for example:&lt;/p&gt; &lt;ul class="org-ul"&gt; &lt;li&gt;Annotations and labels&lt;/li&gt; &lt;li&gt;Ports&lt;/li&gt; &lt;li&gt;Environment variables&lt;/li&gt; &lt;li&gt;Volumes &amp;#38; mounts&lt;/li&gt; &lt;li&gt;Sidecars&lt;/li&gt; &lt;li&gt;More&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here&amp;#8217;s an example of how to add a label:&lt;/p&gt; &lt;pre class="src src-java"&gt;&lt;span style="color: #51afef;"&gt;import&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;io&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;dekorate&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;kubernetes&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;annotation&lt;/span&gt;.&lt;span style="color: #ecbe7b;"&gt;KubernetesApplication&lt;/span&gt;; &lt;span style="color: #a9a1e1;"&gt;@KubernetesApplication&lt;/span&gt;&lt;span style="color: #e78779;"&gt;(&lt;/span&gt;labels=&lt;span style="color: #a9a1e1;"&gt;@Label&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;(&lt;/span&gt;key=&lt;span style="color: #98be65;"&gt;"foo"&lt;/span&gt;, value=&lt;span style="color: #98be65;"&gt;"bar"&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;)&lt;/span&gt;&lt;span style="color: #e78779;"&gt;)&lt;/span&gt; &lt;span style="color: #51afef;"&gt;public&lt;/span&gt; &lt;span style="color: #51afef;"&gt;class&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;Main&lt;/span&gt; &lt;span style="color: #e78779;"&gt;{&lt;/span&gt; &lt;span style="color: #51afef;"&gt;public&lt;/span&gt; &lt;span style="color: #51afef;"&gt;static&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;void&lt;/span&gt; &lt;span style="color: #c678dd;"&gt;main&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;(&lt;/span&gt;&lt;span style="color: #ecbe7b;"&gt;String&lt;/span&gt;&lt;span style="color: #528369;"&gt;[]&lt;/span&gt; &lt;span style="color: #dcaeea;"&gt;args&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;)&lt;/span&gt; &lt;span style="color: #a9b6c1;"&gt;{&lt;/span&gt; &lt;span style="color: #5b6268;"&gt;//&lt;/span&gt;&lt;span style="color: #5b6268;"&gt;your code here.&lt;/span&gt; &lt;span style="color: #a9b6c1;"&gt;}&lt;/span&gt; &lt;span style="color: #e78779;"&gt;}&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;The analog for Openshift:&lt;/p&gt; &lt;pre class="src src-java"&gt;&lt;span style="color: #51afef;"&gt;import&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;io&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;dekorate&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;openshift&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;annotation&lt;/span&gt;.&lt;span style="color: #ecbe7b;"&gt;OpenshiftApplication&lt;/span&gt;; &lt;span style="color: #a9a1e1;"&gt;@OpenshiftApplication&lt;/span&gt;&lt;span style="color: #e78779;"&gt;(&lt;/span&gt;labels=&lt;span style="color: #a9a1e1;"&gt;@Label&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;(&lt;/span&gt;key=&lt;span style="color: #98be65;"&gt;"foo"&lt;/span&gt;, value=&lt;span style="color: #98be65;"&gt;"bar"&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;)&lt;/span&gt;&lt;span style="color: #e78779;"&gt;)&lt;/span&gt; &lt;span style="color: #51afef;"&gt;public&lt;/span&gt; &lt;span style="color: #51afef;"&gt;class&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;Main&lt;/span&gt; &lt;span style="color: #e78779;"&gt;{&lt;/span&gt; &lt;span style="color: #51afef;"&gt;public&lt;/span&gt; &lt;span style="color: #51afef;"&gt;static&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;void&lt;/span&gt; &lt;span style="color: #c678dd;"&gt;main&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;(&lt;/span&gt;&lt;span style="color: #ecbe7b;"&gt;String&lt;/span&gt;&lt;span style="color: #528369;"&gt;[]&lt;/span&gt; &lt;span style="color: #dcaeea;"&gt;args&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;)&lt;/span&gt; &lt;span style="color: #a9b6c1;"&gt;{&lt;/span&gt; &lt;span style="color: #5b6268;"&gt;//&lt;/span&gt;&lt;span style="color: #5b6268;"&gt;your code here.&lt;/span&gt; &lt;span style="color: #a9b6c1;"&gt;}&lt;/span&gt; &lt;span style="color: #e78779;"&gt;}&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;The beauty of using annotations for decorating the manifests is that the validity of the configuration is validated by the compiler. On top of that modern IDEs provide syntax highlighting and code completion that assists the user in configuring things.&lt;/p&gt; &lt;p&gt;Using annotations, to specify small chunks of configuration can be a preferable experience compared to writing long sheets of JSON or YAML.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Working without a Main class&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The code examples above are pretty straight forward for Java applications that feature a Main class (simple Java applications, Spring Boot, etc). What about application frameworks that do not necessarily have a Main class?&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/dekorateio/dekorate"&gt;Dekorate&lt;/a&gt; annotations do not need to be added to the Main class. Any class would do, even an empty class that will serve just for that purpose.&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;Using application configuration&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Developers, often prefer to have the ability to externalize configuration. Others prefer to keep code completely separated from the configuration. To cover those needs, Dekorate makes it possible to use application configuration.&lt;/p&gt; &lt;p&gt;At the moment this feature is only available to Spring Boot. For Spring Boot, the application is configured via &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt;. Dekorate will read both of those files and will process all properties prefixed with &lt;code&gt;dekorate&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To add the &lt;code&gt;foo=bar&lt;/code&gt; label using &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt; &lt;pre class="example"&gt;dekorate.kubernetes.label[0].key=foo dekorate.kubernetes.label[0].value=bar &lt;/pre&gt; &lt;p&gt;or using &lt;code&gt;application.yaml&lt;/code&gt;:&lt;/p&gt; &lt;pre class="src src-yaml"&gt;&lt;span style="color: #dcaeea;"&gt;dekorate&lt;/span&gt;: &lt;span style="color: #dcaeea;"&gt;kubernetes&lt;/span&gt;: &lt;span style="color: #dcaeea;"&gt;label&lt;/span&gt;: - &lt;span style="color: #dcaeea;"&gt;key&lt;/span&gt;: foo &lt;span style="color: #dcaeea;"&gt;value&lt;/span&gt;: bar &lt;/pre&gt; &lt;p&gt;The full list of supported properties can be found at: &lt;a href="https://github.com/snowdrop/dekorate/blob/master/config.md"&gt;https://github.com/snowdrop/dekorate/blob/master/config.md&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;Using both&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;If you would like to use annotations and override values through the standard application configuration mechanisms, this is also possible.&lt;/p&gt; &lt;h4&gt;Testing the generated manifests&lt;/h4&gt; &lt;p&gt;To test the application and the generated manifests, Dekorate provides junit5 extensions, that makes it easy to:&lt;/p&gt; &lt;ul class="org-ul"&gt; &lt;li&gt;Build the application container.&lt;/li&gt; &lt;li&gt;Deploy the application to a target cluster.&lt;/li&gt; &lt;li&gt;Wait until the application is ready.&lt;/li&gt; &lt;li&gt;Inject application metadata inside the test code.&lt;/li&gt; &lt;/ul&gt; &lt;pre class="src src-java"&gt;&lt;span style="color: #51afef;"&gt;import&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;io&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;dekorate&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;deps&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;kubernetes&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;client&lt;/span&gt;.&lt;span style="color: #ecbe7b;"&gt;KubernetesClient&lt;/span&gt;; &lt;span style="color: #51afef;"&gt;import&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;io&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;dekorate&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;deps&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;kubernetes&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;api&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;model&lt;/span&gt;.&lt;span style="color: #ecbe7b;"&gt;Pod&lt;/span&gt;; &lt;span style="color: #51afef;"&gt;import&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;io&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;dekorate&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;testing&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;annotation&lt;/span&gt;.&lt;span style="color: #ecbe7b;"&gt;Inject&lt;/span&gt;; &lt;span style="color: #51afef;"&gt;import&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;io&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;dekorate&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;testing&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;annotation&lt;/span&gt;.&lt;span style="color: #ecbe7b;"&gt;Named&lt;/span&gt;; &lt;span style="color: #51afef;"&gt;import&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;org&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;junit&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;jupiter&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;api&lt;/span&gt;.&lt;span style="color: #ecbe7b;"&gt;Test&lt;/span&gt;; &lt;span style="color: #51afef;"&gt;import&lt;/span&gt; &lt;span style="color: #51afef;"&gt;static&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;org&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;junit&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;jupiter&lt;/span&gt;.&lt;span style="color: #a9a1e1;"&gt;api&lt;/span&gt;.Assertions.&lt;span style="color: #ecbe7b;"&gt;assertNotNull&lt;/span&gt;; &lt;span style="color: #a9a1e1;"&gt;@KubernetesIntegrationTest&lt;/span&gt; &lt;span style="color: #51afef;"&gt;public&lt;/span&gt; &lt;span style="color: #51afef;"&gt;class&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;SpringBootOnKubernetesIT&lt;/span&gt; &lt;span style="color: #e78779;"&gt;{&lt;/span&gt; &lt;span style="color: #a9a1e1;"&gt;@Inject&lt;/span&gt; &lt;span style="color: #51afef;"&gt;private&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;KubernetesClient&lt;/span&gt; &lt;span style="color: #dcaeea;"&gt;client&lt;/span&gt;; &lt;span style="color: #a9a1e1;"&gt;@Inject&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;Pod&lt;/span&gt; &lt;span style="color: #dcaeea;"&gt;pod&lt;/span&gt;; &lt;span style="color: #a9a1e1;"&gt;@Test&lt;/span&gt; &lt;span style="color: #51afef;"&gt;public&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;void&lt;/span&gt; &lt;span style="color: #c678dd;"&gt;testApplication&lt;/span&gt;&lt;span style="color: #a9b6c1;"&gt;()&lt;/span&gt; &lt;span style="color: #51afef;"&gt;throws&lt;/span&gt; &lt;span style="color: #ecbe7b;"&gt;Exception&lt;/span&gt; &lt;span style="color: #a9b6c1;"&gt;{&lt;/span&gt; assertNotNull&lt;span style="color: #528369;"&gt;(&lt;/span&gt;client&lt;span style="color: #528369;"&gt;)&lt;/span&gt;; &lt;span style="color: #5b6268;"&gt;// &lt;/span&gt;&lt;span style="color: #5b6268;"&gt;test the application....&lt;/span&gt; &lt;span style="color: #a9b6c1;"&gt;}&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;Dekorate provides a lot of examples featuring advanced integration tests. For more details, check: &lt;a href="https://github.com/snowdrop/dekorate/tree/master/examples"&gt;https://github.com/snowdrop/dekorate/tree/master/examples&lt;/a&gt;.&lt;/p&gt; &lt;h4 id="orga6b962d"&gt;Building and deploying&lt;/h4&gt; &lt;p&gt;Dekorate focuses on manifest generation and maintenance. Building container images and deploying them is not its primary focus. However, for making developers life easier it does provide hooks, for building, pushing to registries and deploying during the compilation phase.&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;Docker builds&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;For &lt;a href="https://docker.io"&gt;Docker&lt;/a&gt; builds, provided a &lt;code&gt;Dockerfile&lt;/code&gt; is in the module root and the &lt;code&gt;docker&lt;/code&gt; binary in the PATH, Dekorate can be used with the following flags:&lt;/p&gt; &lt;p&gt;Building container images:&lt;/p&gt; &lt;pre class="src src-sh"&gt;mvn clean package -Ddekorate.build=true &lt;/pre&gt; &lt;p&gt;Right after the actual maven build, &lt;a href="https://github.com/dekorateio/dekorate"&gt;Dekorate&lt;/a&gt; will use the &lt;code&gt;docker&lt;/code&gt; binary to perform the docker build.&lt;/p&gt; &lt;p&gt;Pushing container images:&lt;/p&gt; &lt;pre class="src src-sh"&gt;mvn clean package -Ddekorate.push=true &lt;/pre&gt; &lt;p&gt;Right after the actual maven build a &lt;code&gt;docker&lt;/code&gt; push will be performed.&lt;/p&gt; &lt;p&gt;Deploying the generated manifests:&lt;/p&gt; &lt;pre class="src src-sh"&gt;mvn clean package -Ddekorate.deploy=true &lt;/pre&gt; &lt;p&gt;Right after the build, the generated manifests will be deployed to the target cluster. This action assumes that either &lt;code&gt;kubectl&lt;/code&gt; or &lt;code&gt;oc&lt;/code&gt; are present in the PATH and a valid &lt;code&gt;~/.kube/config&lt;/code&gt; file is present pointing to the target cluster.&lt;/p&gt; &lt;h4&gt;&lt;strong&gt;S2i builds&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;For &lt;a href="https://openshift.com"&gt;Openshift&lt;/a&gt;, dealing with container builds is even simpler as no &lt;code&gt;Dockerfile&lt;/code&gt; is required. When the &lt;code&gt;openshfit-annotations&lt;/code&gt; or one of the &lt;a href="https://openshift.com"&gt;Openshift&lt;/a&gt; starters is used with &lt;code&gt;-Ddekorate.build=true&lt;/code&gt;, Dekorate will generate a &lt;code&gt;BuildConfig&lt;/code&gt; and the required &lt;code&gt;ImageStream&lt;/code&gt; resources, for performing an s2i binary build. This action requires the presence of the &lt;code&gt;oc&lt;/code&gt; binary in the PATH.&lt;/p&gt; &lt;h4 id="orgcc5c4ad"&gt;Other features&lt;/h4&gt; &lt;p&gt;It would take a lot more than a single blog post to even enumerate all the available features. It worth&amp;#8217;s mentioning though, that it does provide integration with popular operators (e.g. &lt;a href="https://prometheus.io"&gt;Prometheus&lt;/a&gt;, &lt;a href="https://www.jaegertracing.io"&gt;Jaeger&lt;/a&gt;, &lt;a href="https://github.com/snowdrop/component-operator"&gt;Component&lt;/a&gt;) and extensions and the list is growing fast.&lt;/p&gt; &lt;h3 id="orge159a3c"&gt;Framework integration&lt;/h3&gt; &lt;p&gt;Dekorate does provide integration with quite a few application frameworks like Spring Boot. However, there are frameworks that provide native resource generation for Kubernetes based on Dekorate, such as &lt;a href="https://quarkus.io"&gt;Quarkus&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Quarkus provides its own extension for Kubernetes. The extension instead of using annotations, is interacting with the rest of the available extensions to retrieve as much information as possible for the application (e.g. server port, health checks and so on). Once, all the required information is collected it uses Dekorate to customize the generated manifests. You can find more information at &lt;a href="https://quarkus.io/guides/ap4k"&gt;Quarkus Kubernetes extension&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="orgcde662f"&gt;Tech preview&lt;/h3&gt; &lt;p&gt;A trimmed down feature set of Dekorate is also available as a &amp;#8220;tech preview&amp;#8221; as part of Red Hat OpenShift Application Runtimes (&lt;a href="https://developers.redhat.com/products/rhoar/overview"&gt;RHOAR)&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The tech preview release includes the modules that are listed at: &lt;a href="https://github.com/snowdrop/dekorate"&gt;https://github.com/snowdrop/dekorate&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;The tech preview release artifacts can be found at: &lt;a href="https://maven.repository.redhat.com/ga/io/dekorate"&gt;https://maven.repository.redhat.com/ga/io/dekorate&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id="org40e5b02"&gt;Conclusion&lt;/h3&gt; &lt;p&gt;Dekorate is a fairly new project, that takes care of Kubernetes and Red Hat Openshift manifest management, for all the JVM languages and all build tools. It requires the minimum possible effort to get started and it does provide two styles of configuration: using annotations, and using application configuration. It provides a wide range of integration modules with frameworks, extensions and operators and its growing fast.&lt;/p&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F15%2Fhow-to-use-dekorate-to-create-kubernetes-manifests%2F&amp;#38;linkname=How%20to%20use%20Dekorate%20to%20create%20Kubernetes%20manifests" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F15%2Fhow-to-use-dekorate-to-create-kubernetes-manifests%2F&amp;#38;linkname=How%20to%20use%20Dekorate%20to%20create%20Kubernetes%20manifests" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F15%2Fhow-to-use-dekorate-to-create-kubernetes-manifests%2F&amp;#38;linkname=How%20to%20use%20Dekorate%20to%20create%20Kubernetes%20manifests" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F15%2Fhow-to-use-dekorate-to-create-kubernetes-manifests%2F&amp;#38;linkname=How%20to%20use%20Dekorate%20to%20create%20Kubernetes%20manifests" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F15%2Fhow-to-use-dekorate-to-create-kubernetes-manifests%2F&amp;#38;linkname=How%20to%20use%20Dekorate%20to%20create%20Kubernetes%20manifests" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F15%2Fhow-to-use-dekorate-to-create-kubernetes-manifests%2F&amp;#38;linkname=How%20to%20use%20Dekorate%20to%20create%20Kubernetes%20manifests" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F15%2Fhow-to-use-dekorate-to-create-kubernetes-manifests%2F&amp;#38;linkname=How%20to%20use%20Dekorate%20to%20create%20Kubernetes%20manifests" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F15%2Fhow-to-use-dekorate-to-create-kubernetes-manifests%2F&amp;#038;title=How%20to%20use%20Dekorate%20to%20create%20Kubernetes%20manifests" data-a2a-url="https://developers.redhat.com/blog/2019/08/15/how-to-use-dekorate-to-create-kubernetes-manifests/" data-a2a-title="How to use Dekorate to create Kubernetes manifests"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/15/how-to-use-dekorate-to-create-kubernetes-manifests/"&gt;How to use Dekorate to create Kubernetes manifests&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/12eGCjkcYzk" height="1" width="1" alt=""/&gt;</content><summary>“Write once, run everywhere” is a slogan created by Sun Microsystems to illustrate the cross-platform benefits of Java. In the cloud-native world, this slogan is more accurate than ever, with virtualization and containers increasing the distance between code and hardware even further. But what does this shift means for developers? Developers need to take care of containerizing their application an...</summary><dc:creator>ikanello</dc:creator><dc:date>2019-08-15T07:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/15/how-to-use-dekorate-to-create-kubernetes-manifests/</feedburner:origLink></entry><entry><title>Best practices for running Buildah in a container</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/K5SNaLhaY2U/" /><category term="buildah" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="container" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="docker" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Daniel Walsh</name></author><id>searchisko:content:id:jbossorg_blog-best_practices_for_running_buildah_in_a_container</id><updated>2019-08-14T07:00:51Z</updated><published>2019-08-14T07:00:51Z</published><content type="html">&lt;p&gt;One of the cool things about separating the container runtimes into different tools is that you can start to combine them to help secure one other.&lt;/p&gt; &lt;p&gt;Lots of people would like to build OCI/container images within a system like &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;. Imagine you have a CI/CD system that is constantly building container images, a tool like &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;/Kubernetes would be useful for distributing the load of builds. Until recently, most people were leaking the Docker socket into the container and then allowing the containers to do &lt;code&gt;docker build&lt;/code&gt;. &lt;a href="https://www.projectatomic.io/blog/2015/08/why-we-dont-let-non-root-users-run-docker-in-centos-fedora-or-rhel/"&gt;As I pointed out years ago&lt;/a&gt;, this is one of the most dangerous things you can do.  Giving people root access on the system or sudo without requiring a password is more secure than allowing access to the Docker socket.&lt;/p&gt; &lt;p&gt;Because of this, many people have been attempting to run Buildah within a container. We have been watching and answering questions on this for a while. We have built an &lt;a href="https://github.com/containers/Demos/tree/master/running/BuildahInPodman"&gt;example&lt;/a&gt; of what we think is the best way to run Buildah inside of a container and have made these container images public at &lt;a href="https://quay.io/buildah"&gt;quay.io/buildah&lt;/a&gt;.&lt;span id="more-618757"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Setup&lt;/h2&gt; &lt;p&gt;These images are built off the Dockerfiles provided in the Buildah repo `buildahimage` directory: &lt;a href="https://github.com/containers/buildah/tree/master/contrib/buildahimage"&gt;https://github.com/containers/buildah/tree/master/contrib/buildahimage&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I will examine the &lt;a href="https://github.com/containers/buildah/blob/master/buildahimage/stable/Dockerfile"&gt;stable Dockerfile&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;# stable/Dockerfile # # Build a Buildah container image from the latest # stable version of Buildah on the Fedoras Updates System. # https://bodhi.fedoraproject.org/updates/?search=buildah # This image can be used to create a secured container # that runs safely with privileges within the container. # FROM fedora:latest # Don't include container-selinux and remove # directories used by dnf that are just taking # up space. RUN yum -y install buildah fuse-overlayfs --exclude container-selinux; rm -rf /var/cache /var/log/dnf* /var/log/yum.* # Adjust storage.conf to enable Fuse storage. RUN sed -i -e 's|^#mount_program|mount_program|g' -e '/additionalimage.*/a "/var/lib/shared",' /etc/containers/storage.conf &lt;/pre&gt; &lt;p&gt;We use the &lt;a href="https://github.com/containers/fuse-overlayfs"&gt;fuse-overlay&lt;/a&gt; program inside of the container rather than using the host kernel overlay. The reason is that, currently, kernel overlay mounts require the SYS_ADMIN capability, and we want to be able to run our Buildah containers without any additional privileges than a normal root container. Fuse-overlay works quite well and gives us better performance than using the VFS storage driver. Note that using Fuse requires people running the Buildah container to provide the /dev/fuse device.&lt;/p&gt; &lt;pre&gt;podman run --device /dev/fuse quay.io/buildahctr ... RUN mkdir -p /var/lib/shared/overlay-images /var/lib/shared/overlay-layers; touch /var/lib/shared/overlay-images/images.lock; touch /var/lib/shared/overlay-layers/layers.lock &lt;/pre&gt; &lt;p&gt;Here I am setting up a directory for additional-stores. &lt;a href="https://github.com/containers/storage"&gt;Container/storage&lt;/a&gt; supports this concept of adding additional read-only image stores. For example, you could set up an overlay storage area on one machine and NFS mount the storage onto another machine and use the images without having to pull them down. We plan to use this storage so that we can volume-mount some image storage from the host to be used within the container.&lt;/p&gt; &lt;pre&gt;# Set up environment variables to note that this is # not starting with user namespace and default to # isolate the filesystem with chroot. ENV _BUILDAH_STARTED_IN_USERNS="" BUILDAH_ISOLATION=chroot &lt;/pre&gt; &lt;p&gt;Finally, we default the Buildah container to run with chroot isolation.  Setting the environment variable &lt;code&gt;BUILDAH_ISOLATION&lt;/code&gt; tells Buildah to default to using chroot.  We don’t need to run with extra isolation because we are already running within a container. Having Buildah create its own namespace separated containers requires SYS_ADMIN privileges and requires us to relax SELinux and SECCOMP rules on the running container, defeating the purpose of running builds within a locked-down container.&lt;/p&gt; &lt;h2&gt;Running Buildah inside a container&lt;/h2&gt; &lt;p&gt;The way we designed the Buildah container images above allows us to get the ultimate flexibility on how we launch the containers.&lt;/p&gt; &lt;h3&gt;Security vs. speed&lt;/h3&gt; &lt;p&gt;In the world of computer security, there is always a battle between the speed that a process can run and the amount of security we can wrap it with.  When building containers, we have the same tradeoffs. In the following section, I will describe the tradeoff between speed and security.&lt;/p&gt; &lt;p&gt;The container image above is going to keep its storage in &lt;code&gt;/var/lib/containers&lt;/code&gt;, so we need to volume-mount content into this directory, and this volume can dramatically change the speed of building the container image.&lt;/p&gt; &lt;p&gt;Let’s look at three potential examples.&lt;/p&gt; &lt;p&gt;1. For the most secure, I could create a new directory for containers/image for each container and volume-mount it into the container. We will also put the context directory into the container under &lt;code&gt;/build&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;# mkdir /var/lib/containers1 # podman run -v ./build:/build:z -v /var/lib/containers1:/var/lib/containers:Z quay.io/buildah/stable\ buildah  -t image1 bud /build # podman run -v /var/lib/containers1:/var/lib/containers:Z quay.io/buildah/stable buildah  push \ image1 registry.company.com/myuser # rm -rf /var/lib/containers1 &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Security: &lt;/strong&gt;Buildah running within this container is fully locked down, and it is running with dropped capabilities, SECOMP enforcing, and SELinux enforcing.  You could even run this container with User Namespace separation by adding something like &lt;code&gt;--uidmap 0:100000:10000&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Performance: &lt;/strong&gt; This is the least performant because it will need to pull down all of the images it will use from container registries, and it cannot take advantage of caches. When the Buildah container is done, it should push the image to the registry and destroy the content. Future container images that you might want to build off this new container image will have to pull the new image from a registry, because the image was removed from the host.&lt;/p&gt; &lt;p&gt;2. If we want to match Docker performance, we could volume mount in the hosts container/storage into the container.&lt;/p&gt; &lt;pre&gt;# podman run -v ./build:/build:z -v&lt;b&gt; /var/lib/containers&lt;/b&gt;:/var/lib/containers &lt;b&gt;--security-opt label:disabled &lt;/b&gt;quay.io/buildah/stable buildah  -t image2 bud /build # podman run -v&lt;b&gt; /var/lib/containers&lt;/b&gt;:/var/lib/containers &lt;b&gt;--security-opt label:disabled \ &lt;/b&gt;quay.io/buildah/stable buildah push image2 registry.company.com/myuser &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Security: &lt;/strong&gt; This is the least secure way of building containers, the container is allowed to modify the container storage on the host and potentially could cause Podman or CRI-O to do things with rogue images. Also, to make this work, I had to disable SELinux separation. SELinux would block the Buildah container processes from interacting with the hosts storage. Note that this is still better than running with the Docker socket, because the container is still locked down with the other security features and cannot easily launch a container on the host.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Performance: &lt;/strong&gt; This is the best performance because it can take advantage of the cache.  If Podman or CRI-O previously pulled the image to the host, the Buildah process inside of the container will not need to re-pull the image.  Future builds based on this image can also take advantage of the cache.&lt;/p&gt; &lt;p&gt;3. A third way to build the containers would be to create a project container image directory and to share this image directory between all of the containers in the project.&lt;/p&gt; &lt;pre&gt;# mkdir /var/lib/project3 # podman run &lt;b&gt;--security-opt label:level=s0:C100, C200 &lt;/b&gt;&lt;span style="font-weight: 400;"&gt;-v ./build:/build:z \ -v /var/lib/project3:/var/lib/containers:Z quay.io/buildah/stable buildah  -t image3 bud /build # podman run &lt;/span&gt;&lt;b&gt;--security-opt label:level=s0:C100, C200&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; \ -v /var/lib/project3:/var/lib/containers quay.io/buildah/stable buildah push image3 \ registry.company.com/myuser &lt;/span&gt;&lt;/pre&gt; &lt;p&gt;In the third example, I don’t remove the project directory (&lt;code&gt;/var/lib/project3&lt;/code&gt;) between runs, so future builds within the same project can take advantage of the cache.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt; This is the middle ground of security. The containers do not get access to the hosts content and cannot cause Podman/CRI-O to do bad things by writing content to their image store.  Containers can affect other container builders within the same project.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; This setup might be less performant than sharing the cache with the host, because it cannot take advantage of images previously pulled by Podman/CRI-O. But once one Buildah pulls an image, all of the other builds can take advantage of the image.&lt;/p&gt; &lt;h3&gt;Additional stores&lt;/h3&gt; &lt;p&gt;&lt;a href="https://github.com/containers/storage"&gt;Containers/storage&lt;/a&gt; has a cool feature called additional stores, which allows container engines to use external container overlay image stores read/only when running and building a container.  Basically, you can add one or more read/only stores to the storage.conf file and then when running a container, the container engine will search each of the stores for the image you want to run. And, it will only pull the image from a registry, if none of the stores finds the image. The container engine will only be able to write to its single writable stores.&lt;/p&gt; &lt;p&gt;If you go back to look at the Dockerfile we used to build the quay.io/buildah/stable image, you will see these lines:&lt;/p&gt; &lt;pre&gt;# Adjust storage.conf to enable Fuse storage. RUN sed -i -e 's|^#mount_program|mount_program|g' &lt;b&gt;-e '/additionalimage.*/a "/var/lib/shared",' &lt;/b&gt;/etc/containers/storage.conf RUN mkdir -p &lt;b&gt;/var/lib/shared/&lt;/b&gt;overlay-images /var/lib/shared/overlay-layers; touch /var/lib/shared/overlay-images/images.lock; touch /var/lib/shared/overlay-layers/layers.lock &lt;/pre&gt; &lt;p&gt;The first line is modifying &lt;code&gt;/etc/containers/storage.conf&lt;/code&gt; inside of the container image. It is telling the storage driver to use &amp;#8220;additionalimagestores&amp;#8221; in the &lt;code&gt;/var/lib/shared&lt;/code&gt; directory. In the next line, I create the shared directory and add a couple of lock files to keep containers/storage happy.  Basically, this is creating an empty container image store.&lt;/p&gt; &lt;p&gt;If we volume-mount in containers/storage on top of this directory, then Buildah will be able to use the images.&lt;/p&gt; &lt;p&gt;If we go back to example one above, where we were able to take advantage of the hosts containers/store within the Buildah image, we get the best performance, because Podman/CRI-O might have previously pulled down the image.  But we get the worst security because the container could write to the store. With additional images, we can get the best of both worlds.&lt;/p&gt; &lt;pre&gt;# mkdir /var/lib/containers4 # podman run -v ./build:/build:z -v&lt;b&gt; /var/lib/containers/storage&lt;/b&gt;:/var/lib/shared:ro -v \ &lt;b&gt;/var/lib/containers4&lt;/b&gt;:/var/lib/containers:Z  quay.io/buildah/stable \  buildah  -t image4 bud /build # podman run -v&lt;b&gt; /var/lib/containers/storage&lt;/b&gt;:/var/lib/shared:ro  \ -v &amp;#62;&lt;b&gt;/var/lib/containers4&lt;/b&gt;:/var/lib/containers:Z quay.io/buildah/stable buildah push image4 \ registry.company.com/myuser # rm -rf /var/lib/continers4 &lt;/pre&gt; &lt;p&gt;Notice how I mounted the &lt;code&gt;/var/lib/containers/storage&lt;/code&gt; from the host onto &lt;code&gt;/var/lib/shared&lt;/code&gt; in the container read/only.  When Buildah runs within the container, it can take advantage of any previously pulled images by Podman/CRI-O to speed things up, but it still can only write to its own storage. Note also that I can now do this with SELinux container separation enabled.&lt;/p&gt; &lt;h4&gt;Very cool&lt;/h4&gt; &lt;p&gt;One potential issue with this is that you should not remove any images from the underlying storage.  If you do, you might cause the Buildah container to blow up.&lt;/p&gt; &lt;h4&gt;But that’s not all&amp;#8230;&lt;/h4&gt; &lt;p&gt;Additional stores are even better than that. You can set up a networked shared storage with all of your container images stored in it. And then you can share this storage to all of your Buildah containers. Imagine you had a hundred images that your CI/CD system used regularly for building container images. You could set up one host with the storage pre-pulled of all the images. Then, you could use your favorite network storage tool (NFS, Gluster, Ceph, ISCSI, S3&amp;#8230;) and share the storage with all of your Buildah or Kubernetes nodes.&lt;/p&gt; &lt;p&gt;Just volume-mount this networked storage into the Buildah containers at &lt;code&gt;/var/lib/shared&lt;/code&gt;, and instantly your Buildah container no longer has to pull images at all. They are all pre-populated, and you are ready to roll.&lt;/p&gt; &lt;p&gt;Of course, this could also be taken advantage of by your Kubernetes and container infrastructure to launch and run containers all over the place without having to pull the images at all.  I could even imagine a container registry that, when receiving a container image pushed to it, would explode the container image onto the shared storage. Then, instantly, all of your nodes would have access to the updated image.&lt;/p&gt; &lt;p&gt;I have heard of huge multi-gigabyte container images. Using additional stores means you would no longer need to copy them around your environment, and your container startup times would be instantaneous.&lt;/p&gt; &lt;p&gt;In my next article, I will cover a new feature we are working on—overlay volume mounts—which will make building images even faster.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Running Buildah within a container in Kubernetes/CRI-O or Podman, or even Docker is easy to do, and it can be done a much more securely then leaking in the docker.socket. We have added a lot of flexibility with the image to allow you to run it in different ways depending on your security and performance needs.&lt;/p&gt; &lt;p&gt;Additional stores can be used to help speed up or even eliminate the need to pull down container images.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ve also put together a demo to help illustrate the concepts discussed here:&lt;br /&gt; &lt;script id="asciicast-0G4vnuoFSxwNI4VA6v8QXYFpo" src="https://asciinema.org/a/0G4vnuoFSxwNI4VA6v8QXYFpo.js" async&gt;&lt;/script&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F14%2Fbest-practices-for-running-buildah-in-a-container%2F&amp;#38;linkname=Best%20practices%20for%20running%20Buildah%20in%20a%20container" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F14%2Fbest-practices-for-running-buildah-in-a-container%2F&amp;#38;linkname=Best%20practices%20for%20running%20Buildah%20in%20a%20container" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F14%2Fbest-practices-for-running-buildah-in-a-container%2F&amp;#38;linkname=Best%20practices%20for%20running%20Buildah%20in%20a%20container" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F14%2Fbest-practices-for-running-buildah-in-a-container%2F&amp;#38;linkname=Best%20practices%20for%20running%20Buildah%20in%20a%20container" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F14%2Fbest-practices-for-running-buildah-in-a-container%2F&amp;#38;linkname=Best%20practices%20for%20running%20Buildah%20in%20a%20container" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F14%2Fbest-practices-for-running-buildah-in-a-container%2F&amp;#38;linkname=Best%20practices%20for%20running%20Buildah%20in%20a%20container" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F14%2Fbest-practices-for-running-buildah-in-a-container%2F&amp;#38;linkname=Best%20practices%20for%20running%20Buildah%20in%20a%20container" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F14%2Fbest-practices-for-running-buildah-in-a-container%2F&amp;#038;title=Best%20practices%20for%20running%20Buildah%20in%20a%20container" data-a2a-url="https://developers.redhat.com/blog/2019/08/14/best-practices-for-running-buildah-in-a-container/" data-a2a-title="Best practices for running Buildah in a container"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/14/best-practices-for-running-buildah-in-a-container/"&gt;Best practices for running Buildah in a container&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/K5SNaLhaY2U" height="1" width="1" alt=""/&gt;</content><summary>One of the cool things about separating the container runtimes into different tools is that you can start to combine them to help secure one other. Lots of people would like to build OCI/container images within a system like Kubernetes. Imagine you have a CI/CD system that is constantly building container images, a tool like Red Hat OpenShift/Kubernetes would be useful for distributing the load of...</summary><dc:creator>Daniel Walsh</dc:creator><dc:date>2019-08-14T07:00:51Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/14/best-practices-for-running-buildah-in-a-container/</feedburner:origLink></entry></feed>
